Source: bcel
Section: java
Priority: optional
Maintainer: Debian Java Maintainers <pkg-java-maintainers@lists.alioth.debian.org>
Uploaders: Torsten Werner <twerner@debian.org>, Emmanuel Bourg <ebourg@apache.org>
Build-Depends-Indep: default-jdk, default-jdk-doc
Build-Depends:
 debhelper-compat (= 13),
 libcommons-lang3-java,
 libjna-platform-java,
 libmaven-bundle-plugin-java,
 libmaven-javadoc-plugin-java,
 junit4,
 maven-debian-helper (>= 2.1~)
Standards-Version: 4.5.0
Vcs-Git: https://salsa.debian.org/java-team/bcel.git
Vcs-Browser: https://salsa.debian.org/java-team/bcel
Homepage: http://commons.apache.org/bcel/

Package: libbcel-java
Architecture: all
Depends: ${misc:Depends}, ${maven:Depends}
Suggests: libbcel-java-doc, ${maven:OptionalDepends}
Description: Analyze, create, and manipulate (binary) Java class files
 The Byte Code Engineering Library is intended to give users a convenient
 possibility to analyze, create, and manipulate (binary) Java class files
 (those ending with .class). Classes are represented by objects which contain
 all the symbolic information of the given class: methods, fields and byte
 code instructions, in particular.
 .
 Such objects can be read from an existing file, be transformed by a program
 (e.g. a class loader at run-time) and dumped to a file again. An even more
 interesting application is the creation of classes from scratch at run-time.
 The Byte Code Engineering Library (BCEL) may be also useful if you want to
 learn about the Java Virtual Machine (JVM) and the format of Java .class
 files.

Package: libbcel-java-doc
Architecture: all
Section: doc
Depends: ${maven:DocDepends}, ${misc:Depends}
Suggests: libbcel-java, ${maven:DocOptionalDepends}
Description: Documentation for Byte Code Engineering Library (BCEL)
 The Byte Code Engineering Library is intended to give users a convenient
 possibility to analyze, create, and manipulate (binary) Java class files
 (those ending with .class). Classes are represented by objects which contain
 all the symbolic information of the given class: methods, fields and byte
 code instructions, in particular.
 .
 Such objects can be read from an existing file, be transformed by a program
 (e.g. a class loader at run-time) and dumped to a file again. An even more
 interesting application is the creation of classes from scratch at run-time.
 The Byte Code Engineering Library (BCEL) may be also useful if you want to
 learn about the Java Virtual Machine (JVM) and the format of Java .class
 files.
 .
 This package contains the API (javadoc) documentation.
